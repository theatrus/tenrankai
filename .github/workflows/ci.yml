name: CI
# 
# Platform-specific build configuration:
# - Ubuntu/macOS: Full build with AVIF support (default features)
# - Windows: Build without AVIF support (--no-default-features) for easier builds

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest]
        rust: [stable]
        exclude:
          # Reduce the number of jobs by excluding some combinations
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    steps:
    - uses: actions/checkout@v5
    
    - name: Install build dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y nasm ninja-build meson cmake
    
    - name: Install build dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install nasm ninja meson cmake
    
    - name: Install build dependencies (Windows - no AVIF)
      if: matrix.os == 'windows-latest'
      run: |
        # Install OpenSSL via vcpkg (AVIF-related tools not needed since we build with --no-default-features)
        vcpkg install openssl:x64-windows-static
        
        # Set up OpenSSL environment variables
        echo "OPENSSL_DIR=$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows-static" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "OPENSSL_LIB_DIR=$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows-static\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "OPENSSL_INCLUDE_DIR=$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows-static\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "OPENSSL_STATIC=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      shell: powershell
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Override with rust-toolchain.toml if stable
      if: matrix.rust == 'stable'
      run: |
        # The rust-toolchain.toml will override the toolchain
        # This ensures we test with the exact version specified
        rustc --version
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt -- --check
      if: matrix.rust == 'stable'
    
    - name: Run clippy (Ubuntu/macOS)
      run: cargo clippy -- -D warnings
      if: matrix.rust == 'stable' && matrix.os != 'windows-latest'
      
    - name: Run clippy (Windows - no AVIF)
      run: cargo clippy --no-default-features -- -D warnings
      if: matrix.rust == 'stable' && matrix.os == 'windows-latest'
    
    - name: Build (Ubuntu/macOS)
      if: matrix.os != 'windows-latest'
      run: cargo build --verbose
      
    - name: Build (Windows - no AVIF)
      if: matrix.os == 'windows-latest'
      run: cargo build --verbose --no-default-features
    
    - name: Run tests (Ubuntu/macOS)
      if: matrix.os != 'windows-latest'
      run: cargo test --verbose
      
    - name: Run tests (Windows - no AVIF)
      if: matrix.os == 'windows-latest'
      run: cargo test --verbose --no-default-features
    
    - name: Build release (Ubuntu/macOS)
      if: matrix.os != 'windows-latest'
      run: cargo build --release --verbose
      
    - name: Build release (Windows - no AVIF)
      if: matrix.os == 'windows-latest'
      run: cargo build --release --verbose --no-default-features

  # Security audit
  security-audit:
    name: Security audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run cargo audit
      run: cargo audit
